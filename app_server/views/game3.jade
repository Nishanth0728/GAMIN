doctype html
html
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Connect Four

    style.
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        background-color: #f8f8f8;
        display: flex;
        flex-direction: column;
        align-items: center;
        height: 100vh;
      }

      .navbar {
        width: 100%;
        background-color: #333;
        padding: 10px;
        color: white; 
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
      }

      .game-wrapper {
        display: flex;
        flex-direction: column;
        justify-content: center; /* Center game vertically in available space */
        align-items: center; /* Center game horizontally */
        flex-grow: 1; /* Allow this to take up remaining vertical space */
        padding: 20px;
        background: #fff;
        border: 2px solid #333;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        width: 90%;
        max-width: 400px;
        max-height: 500px;
        margin: auto; /* Center horizontally with auto margin */
      }

      .board {
        display: grid;
        grid-template-columns: repeat(7, 40px);
        grid-template-rows: repeat(6, 40px);
        gap: 5px;
      }

      .cell {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #fff;
        border: 2px solid #000;
        cursor: pointer;
      }

      .red {
        background-color: red;
      }

      .yellow {
        background-color: yellow;
      }

      h1 {
        text-align: center;
      }

      h2 {
        text-align: center;
        margin-top: 20px;
      }
      #restart-btn {
        margin-top: 15px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        background-color: black;
        color: white;
        border: none;
        border-radius: 5px;
      }

      #restart-btn:hover {
        background-color: rgb(44, 44, 44);
        color: rgb(255, 255, 255);
      }
      
  body
    include layout.jade
    .game-wrapper
      h1 Connect Four
      .board
        each cell, index in Array(42).fill('')
          div.cell(data-index=index, onclick='dropPiece(this)')
      h2#result
      button#restart-btn(onclick='restartGame()') Restart Game

    script.
      let board = Array(6).fill(null).map(() => Array(7).fill(''));
      let currentPlayer = 'red';

      function dropPiece(cell) {
        let index = parseInt(cell.getAttribute('data-index'));
        let column = index % 7;

        for (let row = 5; row >= 0; row--) {
          if (board[row][column] === '') {
            board[row][column] = currentPlayer;
            document.querySelector(`.cell[data-index='${row * 7 + column}']`).classList.add(currentPlayer);

            if (checkWinner()) {
              document.getElementById('result').textContent = `${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} wins!`;
              resetBoard();
            }

            currentPlayer = currentPlayer === 'red' ? 'yellow' : 'red';
            return;
          }
        }
      }

      function checkWinner() {
        const directions = [[0, 1], [1, 0], [1, 1], [1, -1]];
        for (let row = 0; row < 6; row++) {
          for (let col = 0; col < 7; col++) {
            for (let [dx, dy] of directions) {
              if (checkDirection(row, col, dx, dy)) return true;
            }
          }
        }
        return false;
      }

      function checkDirection(row, col, dx, dy) {
        const color = board[row][col];
        if (color === '') return false;

        for (let i = 1; i < 4; i++) {
          const newRow = row + i * dx;
          const newCol = col + i * dy;
          if (newRow < 0 || newRow >= 6 || newCol < 0 || newCol >= 7 || board[newRow][newCol] !== color) return false;
        }
        return true;
      }

      function resetBoard() {
        setTimeout(() => {
          restartGame();
        }, 2000);
      }

      function restartGame() {
        board = Array(6).fill(null).map(() => Array(7).fill(''));
          document.querySelectorAll('.cell').forEach(cell => {
            cell.classList.remove('red', 'yellow');
          });
          currentPlayer = 'red';
          document.getElementById('result').textContent = '';
      }
