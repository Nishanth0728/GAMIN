doctype html
html
  head
    link(rel='stylesheet', href='/stylesheets/navbar.css')
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    title Snake Game

    style.
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        background-color: #f8f8f8;
        display: flex;
        flex-direction: column;
        align-items: center; /* Center content horizontally */
        height: 100vh; /* Make the body take full height */
      }

      .navbar {
        width: 100%;
        background-color: #333;
        padding: 10px;
        color: white; /* Text color */
        display: flex; /* Flexbox for navbar items */
        justify-content: space-between; /* Space items evenly */
        align-items: center; /* Center items vertically */
        position: relative; /* Keep it at the top */
      }

      .game-wrapper {
        display: flex;
        flex-direction: column;
        justify-content: center; /* Center game vertically in available space */
        align-items: center; /* Center game horizontally */
        flex-grow: 1; /* Allow this to take up remaining vertical space */
        padding: 20px;
        background: #fff;
        border: 2px solid #333;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        width: 90%;
        max-width: 400px;
        max-height: 500px;
        margin: auto; /* Center horizontally with auto margin */
      }

      canvas {
        border: 1px solid #000;
      }

      h2 {
        text-align: center;
      }

      #restart-btn {
        margin-top: 15px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        background-color: black;
        color: white;
        border: none;
        border-radius: 5px;
      }

      #restart-btn:hover {
        background-color: rgb(44, 44, 44);
        color: rgb(255, 255, 255);
      }

  body
    include layout.jade

    .game-wrapper
      h1 Snake Game
      canvas#gameCanvas(width='300', height='300')
      h2#result
      button#restart-btn(onclick='restartGame()') Restart Game

    script.
      const canvas = document.getElementById('gameCanvas');
      const ctx = canvas.getContext('2d');
      const box = 10;
      let snake, direction, food, game;

      function initGame() {
        snake = [{ x: 5 * box, y: 5 * box }];
        direction = '';
        food = {
          x: Math.floor(Math.random() * (canvas.width / box)) * box,
          y: Math.floor(Math.random() * (canvas.height / box)) * box,
        };
        document.getElementById('result').textContent = ''; // Clear result message
      }

      function changeDirection(event) {
        if (event.keyCode === 37 && direction !== 'RIGHT') direction = 'LEFT'; // Left arrow
        if (event.keyCode === 38 && direction !== 'DOWN') direction = 'UP'; // Up arrow
        if (event.keyCode === 39 && direction !== 'LEFT') direction = 'RIGHT'; // Right arrow
        if (event.keyCode === 40 && direction !== 'UP') direction = 'DOWN'; // Down arrow
      }

      function collision(head, array) {
        return array.some(segment => head.x === segment.x && head.y === segment.y);
      }

      function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for (let i = 0; i < snake.length; i++) {
          ctx.fillStyle = (i === 0) ? 'green' : 'white';
          ctx.fillRect(snake[i].x, snake[i].y, box, box);
          ctx.strokeStyle = 'black';
          ctx.strokeRect(snake[i].x, snake[i].y, box, box);
        }

        ctx.fillStyle = 'red';
        ctx.fillRect(food.x, food.y, box, box);

        let snakeX = snake[0].x;
        let snakeY = snake[0].y;

        if (direction === 'LEFT') snakeX -= box;
        if (direction === 'UP') snakeY -= box;
        if (direction === 'RIGHT') snakeX += box;
        if (direction === 'DOWN') snakeY += box;

        if (snakeX === food.x && snakeY === food.y) {
          food = {
            x: Math.floor(Math.random() * (canvas.width / box)) * box,
            y: Math.floor(Math.random() * (canvas.height / box)) * box,
          };
        } else {
          snake.pop();
        }

        let newHead = { x: snakeX, y: snakeY };

        if (snakeX < 0 || snakeY < 0 || snakeX >= canvas.width || snakeY >= canvas.height || collision(newHead, snake)) {
          clearInterval(game);
          document.getElementById('result').textContent = 'Game Over';
        }

        snake.unshift(newHead);
      }

      function startGame() {
        game = setInterval(draw, 100);
      }

      function restartGame() {
        clearInterval(game); // Stop the current game loop
        initGame(); // Reinitialize the game state
        startGame(); // Start a new game loop
      }

      // Initialize game on load
      initGame();
      startGame(); // Start the game loop on load

      // Listen for keydown events to control the snake
      document.addEventListener('keydown', changeDirection);
